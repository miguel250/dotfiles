#!/usr/bin/awk BEGIN{a=ARGV[1];sub(/[a-z_.-]+$/,"../bin/py2-py3",a);system(a"\t"ARGV[1]"\t"ARGV[2])}

from __future__ import print_function
from __future__ import unicode_literals

import os
import sys
import argparse
import glob
from os.path import expanduser
import platform
import shutil
from subprocess import call

HOME = expanduser('~')
OS = platform.system()
CURRENTPATH = os.path.dirname(os.path.realpath(__file__))
DOTFILEDIR = os.path.realpath('%s/../' % CURRENTPATH)
BREWPATH = "%s/brew/path.zsh" % DOTFILEDIR

PY2 = sys.version_info[0] == 2
if PY2 is False:
  raw_input = input

def installGitConfiguration(name, email, backup, overwrite):
    print("Add git configuration...")

    # we want to use the git version installed by brew if available
    returnCode = call(['bash', '-c', 'source %s && git --version' % BREWPATH]) # check git version

    if OS == "Darwin" and returnCode == 69:
        call(['open', '-a', 'xcode'])
        exit(69)
        return

    filePath = os.path.join(HOME, '.gitconfig')
    fileExists = os.path.exists(filePath)
    if ( overwrite is False and backup is False) and fileExists:
        step = raw_input('git configuration already exists, what do you want to do? [e]xit, [b]ackup all or [o]verride all? ')

        if step.lower() == 'b':
            backup = True
        elif step.lower() == 'e':
            exit(1)
        elif step.lower() == "o":
            overwrite = True

    backupFilePath = '%s.bk' % filePath
    backupFilePathExists = os.path.exists(filePath)
    if backupFilePathExists == False and fileExists and backup:
        print("Creating backup copy of %s" % filePath)
        os.rename(filePath, '%s.bk' % filePath)
    elif fileExists:
        if os.path.isdir(filePath):
            os.rmdir(filePath)
        else:
            print("Deleting %s" % filePath)
            os.remove(filePath)


    configPath =  os.path.join(DOTFILEDIR, 'git', 'config')
    call(['bash', '-c', 'source %s && git config --global include.path %s' % (BREWPATH, configPath)])

    while name == None:
        name = raw_input('Please enter your name: ')
    call(['bash', '-c', 'source %s && git config --global user.name %s' % (BREWPATH, name)])

    while email == None:
        email = raw_input('Please enter your email: ')

    call(['bash', '-c', 'source %s && git config --global user.email %s' % (BREWPATH, email)])

def installSymlinks(backup, overwrite=False):
    """
        Install all *.symlink inside of dotfile
    """
    print("Create symlinks...")
    os.chdir(DOTFILEDIR)

    for file in glob.glob('*/*.symlink'):
        fileName, fileExtension = os.path.splitext(os.path.basename(file))
        filePath = os.path.join(HOME, '.%s' % fileName)

        fileExists = os.path.exists(filePath)
        if ( overwrite is False and backup is False) and fileExists:
            step = raw_input('File already exists, what do you want to do? [e]xit, [b]ackup all or [o]verride all? ')

            if step.lower() == 'b':
                backup = True
            elif step.lower() == 'e':
                exit(1)
            elif step.lower() == "o":
                overwrite = True

        backupFilePath = '%s.bk' % filePath
        backupFilePathExists = os.path.exists(filePath)
        if backupFilePathExists == False and backup and fileExists:
            print("Creating backup copy of %s" % filePath)
            os.rename(filePath, '%s.bk' % filePath)
        elif fileExists:
            print("Deleting %s" % filePath)
            os.remove(filePath)

        homePath =  os.path.join(DOTFILEDIR, file)
        print("Creating a symlink to %s from %s" % (filePath, homePath))
        os.symlink(homePath, filePath)

    localFile = os.path.join(HOME, '.localzshrc')
    with open(localFile, "a+") as file:
        if "DOTFILEDIR" not in file.read():
            print("Updating .localzshrc file...")
            file.write('export DOTFILEDIR=%s\n' % DOTFILEDIR)
            file.write('export ZSH=%s/zsh' % DOTFILEDIR)


def runInstall():
    for file in glob.glob('*/install'):
        os.system(file)

    # install any extra dep needed by
    # package.
    for file in glob.glob('*/extra_deps'):
        os.system(file)

def restore():
    step = raw_input('Are you sure you want to uninstall dotfiles [e]xit, [c]ontinue? ')

    if step.lower() != 'c':
        exit(1)

    print("Uninstalling")

    filePath = os.path.join(HOME, '.gitconfig')
    fileExists = os.path.exists(filePath)

    if fileExists:
        print("removing %s file" % filePath)
        os.remove(filePath)
        backupFile = "%s.bk" % filePath
        backupFileExists = os.path.exists("%s.bk" % filePath)
        if backupFileExists:
            print("restoring %s file" % backupFile)
            os.rename(backupFile, filePath)

    for file in glob.glob('*/*.symlink'):
        fileName, fileExtension = os.path.splitext(os.path.basename(file))
        filePath = os.path.join(HOME, '.%s' % fileName)
        fileExists = os.path.exists(filePath)

        if fileExists:
            print("removing %s file" % filePath)
            os.remove(filePath)
            backupFile = "%s.bk" % filePath
            backupFileExists = os.path.exists("%s.bk" % filePath)
            if backupFileExists:
                print("restoring %s file" % backupFile)
                os.rename(backupFile, filePath)
def update_dotfile_bash(migrate=True):
    bash_file = os.path.join(HOME, '.bashrc')
    dotfiles_bash = os.path.join(HOME, '.dotfiles.bash')

    if migrate:
        migrate_bash(bash_file)
        content = """
[ -f ~/.dotfiles.bash ] && source ~/.dotfiles.bash
"""
        with open(bash_file, 'a+') as f:
            if content not in f.read():
                print("Updating .bashrc file...")
                f.write('%s' % content)

    with open(dotfiles_bash, 'w') as f:
        f.write("""
if [[ $- == *i* ]] && [  -d "%s" ]
then
  source %s/brew/path.zsh
  export SHELL=`which zsh`
  [ -z "$ZSH_VERSION" ] && exec "$SHELL" -l
fi
""" % (DOTFILEDIR, DOTFILEDIR))

def migrate_bash(bash_file):
    """
    Remove old bash configuration lines
    """

    lines = []
    remove_lines = ["source %s/brew/path.zsh" % DOTFILEDIR, "export SHELL=`which zsh`", '[ -z "$ZSH_VERSION" ] && exec "$SHELL" -l']
    print(remove_lines)
    with open(bash_file) as f:
        for line in f.readlines():
            if line.strip() not in remove_lines:
                lines.append(line)

    with open(bash_file, 'w') as f:
        content = "".join(lines)
        f.write(content)

def main():
    parser = argparse.ArgumentParser(description='Install dotfiles')

    parser.add_argument('--backup', help='Backup files', action='store_false')
    parser.add_argument('--restore', help='restore to backup file', action='store_true')
    parser.add_argument('--bash', help='Enable zsh shell via bash', action='store_true')
    parser.add_argument('--name', help='Name to use for git', type=str)
    parser.add_argument('--email', help='Email to use for git', type=str)
    parser.add_argument('-s','--link', help='Don\'t run install symlink', action='store_false')
    parser.add_argument('-c','--conf', help='Don\'t run git configuration', action='store_false')
    parser.add_argument('-i','--install', help='Don\'t run */install files', action='store_false')
    parser.add_argument('-o','--overwrite', help='Overwrite all files', action='store_true')

    args = parser.parse_args()

    if args.restore:
        restore()
        return

    if args.bash:
        update_dotfile_bash()
        return

    if args.link:
        update_dotfile_bash(False)
        installSymlinks(args.backup, args.overwrite)

    if args.install:
        runInstall()

    if args.conf:
        installGitConfiguration(args.name, args.email, args.backup, args.overwrite)


    if args.bash != False and args.link:
        print("Run chsh -s $(which zsh) or script/bootstrap --bash to set zsh as default shell")

if __name__ == '__main__':
    main()

